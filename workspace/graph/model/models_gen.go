// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type CategoryDetails interface {
	IsCategoryDetails()
}

type AnalogConn struct {
	PortID      string      `json:"port_id" bson:"port_id"`
	PortKind    Analog      `json:"port_kind" bson:"port_kind"`
	PortUsage   AnalogUsage `json:"port_usage" bson:"port_usage"`
	SignalLines int         `json:"signal_lines" bson:"signal_lines"`
}

type AnalogConnInput struct {
	PortID      string      `json:"port_id" bson:"port_id"`
	PortKind    Analog      `json:"port_kind" bson:"port_kind"`
	SignalLines int         `json:"signal_lines" bson:"signal_lines"`
	PortUsage   AnalogUsage `json:"port_usage" bson:"port_usage"`
}

type CategoryDetailsInput struct {
	ConsoleInput  *ConsoleInput  `json:"console_input,omitempty" bson:"console_input"`
	ComputerInput *ComputerInput `json:"computer_input,omitempty" bson:"computer_input"`
}

type Computer struct {
	CPUProcessor       string          `json:"cpu_processor" bson:"cpu_processor"`
	RAMSize            int             `json:"ram_size" bson:"ram_size"`
	TotalStorage       int             `json:"total_storage" bson:"total_storage"`
	ModelYear          int             `json:"model_year" bson:"model_year"`
	OperatingSystem    string          `json:"operating_system" bson:"operating_system"`
	DedicatedGraphics  *bool           `json:"dedicated_graphics,omitempty" bson:"dedicated_graphics"`
	NetworkConnections []*NetworkConn  `json:"network_connections,omitempty" bson:"network_connections"`
	ComputerPorts      []*ComputerConn `json:"computer_ports,omitempty" bson:"computer_ports"`
	Power              *Power          `json:"power" bson:"power"`
}

func (Computer) IsCategoryDetails() {}

type ComputerConn struct {
	PortID    *string          `json:"port_id,omitempty" bson:"port_id"`
	PortKind  ComputerConnKind `json:"port_kind" bson:"port_kind"`
	FrontPort bool             `json:"front_port" bson:"front_port"`
}

type ComputerConnInput struct {
	PortID    *string          `json:"port_id,omitempty" bson:"port_id"`
	PortKind  ComputerConnKind `json:"port_kind" bson:"port_kind"`
	FrontPort bool             `json:"front_port" bson:"front_port"`
}

type ComputerInput struct {
	CPUProcessor       string               `json:"cpu_processor" bson:"cpu_processor"`
	RAMSize            int                  `json:"ram_size" bson:"ram_size"`
	TotalStorage       int                  `json:"total_storage" bson:"total_storage"`
	ModelYear          int                  `json:"model_year" bson:"model_year"`
	OperatingSystem    string               `json:"operating_system" bson:"operating_system"`
	DedicatedGraphics  bool                 `json:"dedicated_graphics" bson:"dedicated_graphics"`
	NetworkConnections []*NetworkConnInput  `json:"network_connections,omitempty" bson:"network_connections"`
	ComputerPorts      []*ComputerConnInput `json:"computer_ports,omitempty" bson:"computer_ports"`
	Power              *PowerInput          `json:"power" bson:"power"`
}

type Console struct {
	AnalogConnections  []*AnalogConn  `json:"analog_connections,omitempty" bson:"analog_connections"`
	NetworkConnections []*NetworkConn `json:"network_connections,omitempty" bson:"network_connections"`
	Faders             int            `json:"faders" bson:"faders"`
	Motorized          bool           `json:"motorized" bson:"motorized"`
	Midi               MidiType       `json:"midi" bson:"midi"`
	ProtocolInputs     int            `json:"protocol_inputs" bson:"protocol_inputs"`
	SignalProtocol     Protocol       `json:"signal_protocol" bson:"signal_protocol"`
	CanExpand          bool           `json:"can_expand" bson:"can_expand"`
	MaxSampleRate      SampleRate     `json:"max_sample_rate" bson:"max_sample_rate"`
	Power              *Power         `json:"power" bson:"power"`
}

func (Console) IsCategoryDetails() {}

type ConsoleInput struct {
	AnalogConnections  []*AnalogConnInput  `json:"analog_connections,omitempty" bson:"analog_connections"`
	NetworkConnections []*NetworkConnInput `json:"network_connections,omitempty" bson:"network_connections"`
	Faders             int                 `json:"faders" bson:"faders"`
	Motorized          bool                `json:"motorized" bson:"motorized"`
	Midi               MidiType            `json:"midi" bson:"midi"`
	ProtocolInputs     int                 `json:"protocol_inputs" bson:"protocol_inputs"`
	SignalProtocol     Protocol            `json:"signal_protocol" bson:"signal_protocol"`
	CanExpand          bool                `json:"can_expand" bson:"can_expand"`
	MaxSampleRate      SampleRate          `json:"max_sample_rate" bson:"max_sample_rate"`
	Power              *PowerInput         `json:"power,omitempty" bson:"power"`
}

type Dimension struct {
	Length float64 `json:"length" bson:"length"`
	Width  float64 `json:"width" bson:"width"`
	Height float64 `json:"height" bson:"height"`
}

type DimensionInput struct {
	Length float64 `json:"length" bson:"length"`
	Width  float64 `json:"width" bson:"width"`
	Height float64 `json:"height" bson:"height"`
}

type Error struct {
	Field   string `json:"field" bson:"field"`
	Message string `json:"message" bson:"message"`
}

type Item struct {
	ID           primitive.ObjectID `json:"id" bson:"_id"`
	CreatedAt    string             `json:"created_at" bson:"created_at"`
	UpdatedAt    string             `json:"updated_at" bson:"updated_at"`
	Cost         float64            `json:"cost" bson:"cost"`
	Model        string             `json:"model" bson:"model"`
	Weight       float64            `json:"weight" bson:"weight"`
	Manufacturer string             `json:"manufacturer" bson:"manufacturer"`
	Category     Category           `json:"category" bson:"category"`
	Details      CategoryDetails    `json:"details,omitempty" bson:"details"`
	Notes        *string            `json:"notes,omitempty" bson:"notes"`
	Dimensions   *Dimension         `json:"dimensions,omitempty" bson:"dimensions"`
	PDFBlob      *string            `json:"pdf_blob,omitempty" bson:"pdf_blob"`
}

type ItemInput struct {
	CreatedAt    string          `json:"created_at" bson:"created_at"`
	UpdatedAt    string          `json:"updated_at" bson:"updated_at"`
	Cost         float64         `json:"cost" bson:"cost"`
	Model        string          `json:"model" bson:"model"`
	Weight       float64         `json:"weight" bson:"weight"`
	Manufacturer string          `json:"manufacturer" bson:"manufacturer"`
	Category     Category        `json:"category" bson:"category"`
	Notes        *string         `json:"notes,omitempty" bson:"notes"`
	Dimensions   *DimensionInput `json:"dimensions,omitempty" bson:"dimensions"`
	PDFBlob      *string         `json:"pdf_blob,omitempty" bson:"pdf_blob"`
}

type NetworkConn struct {
	PortID       *string      `json:"port_id,omitempty" bson:"port_id"`
	MaxConnSpeed NetworkSpeed `json:"max_conn_speed" bson:"max_conn_speed"`
	Protocol     Protocol     `json:"protocol" bson:"protocol"`
}

type NetworkConnInput struct {
	PortID       *string      `json:"port_id,omitempty" bson:"port_id"`
	MaxConnSpeed NetworkSpeed `json:"max_conn_speed" bson:"max_conn_speed"`
	Protocol     Protocol     `json:"protocol" bson:"protocol"`
}

type Power struct {
	LowerVoltage    *float64        `json:"lower_voltage,omitempty" bson:"lower_voltage"`
	UpperVoltage    *float64        `json:"upper_voltage,omitempty" bson:"upper_voltage"`
	Wattage         float64         `json:"wattage" bson:"wattage"`
	MaxWattage      float64         `json:"max_wattage" bson:"max_wattage"`
	Redundant       *bool           `json:"redundant,omitempty" bson:"redundant"`
	InputConnector  PowerConnector  `json:"input_connector" bson:"input_connector"`
	OutputConnector *PowerConnector `json:"output_connector,omitempty" bson:"output_connector"`
}

type PowerInput struct {
	LowerVoltage    *float64        `json:"lower_voltage,omitempty" bson:"lower_voltage"`
	UpperVoltage    *float64        `json:"upper_voltage,omitempty" bson:"upper_voltage"`
	Wattage         float64         `json:"wattage" bson:"wattage"`
	MaxWattage      float64         `json:"max_wattage" bson:"max_wattage"`
	Redundant       *bool           `json:"redundant,omitempty" bson:"redundant"`
	InputConnector  PowerConnector  `json:"input_connector" bson:"input_connector"`
	OutputConnector *PowerConnector `json:"output_connector,omitempty" bson:"output_connector"`
}

type User struct {
	ID    string `json:"id" bson:"_id"`
	Name  string `json:"name" bson:"name"`
	Email string `json:"email" bson:"email"`
}

type UserInput struct {
	Name  string `json:"name" bson:"name"`
	Email string `json:"email" bson:"email"`
}

type Analog string

const (
	AnalogXlrAnalog      Analog = "XLR_ANALOG"
	AnalogXlrDigital     Analog = "XLR_DIGITAL"
	AnalogTs             Analog = "TS"
	AnalogTrs            Analog = "TRS"
	AnalogTrrs           Analog = "TRRS"
	AnalogTriPinPhoenix  Analog = "TRI_PIN_PHOENIX"
	AnalogDualPinPhoenix Analog = "DUAL_PIN_PHOENIX"
	AnalogNl2            Analog = "NL2"
	AnalogNl4            Analog = "NL4"
	AnalogNl8            Analog = "NL8"
	AnalogDc12v          Analog = "DC_12V"
)

var AllAnalog = []Analog{
	AnalogXlrAnalog,
	AnalogXlrDigital,
	AnalogTs,
	AnalogTrs,
	AnalogTrrs,
	AnalogTriPinPhoenix,
	AnalogDualPinPhoenix,
	AnalogNl2,
	AnalogNl4,
	AnalogNl8,
	AnalogDc12v,
}

func (e Analog) IsValid() bool {
	switch e {
	case AnalogXlrAnalog, AnalogXlrDigital, AnalogTs, AnalogTrs, AnalogTrrs, AnalogTriPinPhoenix, AnalogDualPinPhoenix, AnalogNl2, AnalogNl4, AnalogNl8, AnalogDc12v:
		return true
	}
	return false
}

func (e Analog) String() string {
	return string(e)
}

func (e *Analog) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Analog(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Analog", str)
	}
	return nil
}

func (e Analog) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AnalogUsage string

const (
	AnalogUsageInput    AnalogUsage = "INPUT"
	AnalogUsageInput48v AnalogUsage = "INPUT_48V"
	AnalogUsageOutput   AnalogUsage = "OUTPUT"
	AnalogUsageAux      AnalogUsage = "AUX"
)

var AllAnalogUsage = []AnalogUsage{
	AnalogUsageInput,
	AnalogUsageInput48v,
	AnalogUsageOutput,
	AnalogUsageAux,
}

func (e AnalogUsage) IsValid() bool {
	switch e {
	case AnalogUsageInput, AnalogUsageInput48v, AnalogUsageOutput, AnalogUsageAux:
		return true
	}
	return false
}

func (e AnalogUsage) String() string {
	return string(e)
}

func (e *AnalogUsage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnalogUsage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnalogUsage", str)
	}
	return nil
}

func (e AnalogUsage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Category string

const (
	CategoryConsole     Category = "CONSOLE"
	CategoryProcessor   Category = "PROCESSOR"
	CategoryMonitoring  Category = "MONITORING"
	CategorySpeaker     Category = "SPEAKER"
	CategoryAmplifier   Category = "AMPLIFIER"
	CategoryComputer    Category = "COMPUTER"
	CategoryNetwork     Category = "NETWORK"
	CategoryRadio       Category = "RADIO"
	CategoryMicrophones Category = "MICROPHONES"
	CategorySpkHardware Category = "SPK_HARDWARE"
	CategoryGeneric     Category = "GENERIC"
)

var AllCategory = []Category{
	CategoryConsole,
	CategoryProcessor,
	CategoryMonitoring,
	CategorySpeaker,
	CategoryAmplifier,
	CategoryComputer,
	CategoryNetwork,
	CategoryRadio,
	CategoryMicrophones,
	CategorySpkHardware,
	CategoryGeneric,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryConsole, CategoryProcessor, CategoryMonitoring, CategorySpeaker, CategoryAmplifier, CategoryComputer, CategoryNetwork, CategoryRadio, CategoryMicrophones, CategorySpkHardware, CategoryGeneric:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComputerConnKind string

const (
	ComputerConnKindUsbA            ComputerConnKind = "USB_A"
	ComputerConnKindUsbB            ComputerConnKind = "USB_B"
	ComputerConnKindUsbC            ComputerConnKind = "USB_C"
	ComputerConnKindHdmi            ComputerConnKind = "HDMI"
	ComputerConnKindMiniHdmi        ComputerConnKind = "MINI_HDMI"
	ComputerConnKindDisplayport     ComputerConnKind = "DISPLAYPORT"
	ComputerConnKindMiniDisplayport ComputerConnKind = "MINI_DISPLAYPORT"
	ComputerConnKindMircoB          ComputerConnKind = "MIRCO_B"
	ComputerConnKindSdCard          ComputerConnKind = "SD_CARD"
	ComputerConnKindFirewire        ComputerConnKind = "FIREWIRE"
	ComputerConnKindUsbCThunderbolt ComputerConnKind = "USB_C_THUNDERBOLT"
)

var AllComputerConnKind = []ComputerConnKind{
	ComputerConnKindUsbA,
	ComputerConnKindUsbB,
	ComputerConnKindUsbC,
	ComputerConnKindHdmi,
	ComputerConnKindMiniHdmi,
	ComputerConnKindDisplayport,
	ComputerConnKindMiniDisplayport,
	ComputerConnKindMircoB,
	ComputerConnKindSdCard,
	ComputerConnKindFirewire,
	ComputerConnKindUsbCThunderbolt,
}

func (e ComputerConnKind) IsValid() bool {
	switch e {
	case ComputerConnKindUsbA, ComputerConnKindUsbB, ComputerConnKindUsbC, ComputerConnKindHdmi, ComputerConnKindMiniHdmi, ComputerConnKindDisplayport, ComputerConnKindMiniDisplayport, ComputerConnKindMircoB, ComputerConnKindSdCard, ComputerConnKindFirewire, ComputerConnKindUsbCThunderbolt:
		return true
	}
	return false
}

func (e ComputerConnKind) String() string {
	return string(e)
}

func (e *ComputerConnKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComputerConnKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComputerConnKind", str)
	}
	return nil
}

func (e ComputerConnKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DiaphagmSize string

const (
	DiaphagmSizeSmall DiaphagmSize = "SMALL"
	DiaphagmSizeMed   DiaphagmSize = "MED"
	DiaphagmSizeLarge DiaphagmSize = "LARGE"
)

var AllDiaphagmSize = []DiaphagmSize{
	DiaphagmSizeSmall,
	DiaphagmSizeMed,
	DiaphagmSizeLarge,
}

func (e DiaphagmSize) IsValid() bool {
	switch e {
	case DiaphagmSizeSmall, DiaphagmSizeMed, DiaphagmSizeLarge:
		return true
	}
	return false
}

func (e DiaphagmSize) String() string {
	return string(e)
}

func (e *DiaphagmSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiaphagmSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiaphagmSize", str)
	}
	return nil
}

func (e DiaphagmSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MicrophoneType string

const (
	MicrophoneTypePrePoloraizedCondensor MicrophoneType = "PRE_POLORAIZED_CONDENSOR"
	MicrophoneTypeCondensor              MicrophoneType = "CONDENSOR"
	MicrophoneTypeRibbon                 MicrophoneType = "RIBBON"
	MicrophoneTypeDynamic                MicrophoneType = "DYNAMIC"
)

var AllMicrophoneType = []MicrophoneType{
	MicrophoneTypePrePoloraizedCondensor,
	MicrophoneTypeCondensor,
	MicrophoneTypeRibbon,
	MicrophoneTypeDynamic,
}

func (e MicrophoneType) IsValid() bool {
	switch e {
	case MicrophoneTypePrePoloraizedCondensor, MicrophoneTypeCondensor, MicrophoneTypeRibbon, MicrophoneTypeDynamic:
		return true
	}
	return false
}

func (e MicrophoneType) String() string {
	return string(e)
}

func (e *MicrophoneType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MicrophoneType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MicrophoneType", str)
	}
	return nil
}

func (e MicrophoneType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MidiType string

const (
	MidiTypeUsb    MidiType = "USB"
	MidiTypeSerial MidiType = "SERIAL"
)

var AllMidiType = []MidiType{
	MidiTypeUsb,
	MidiTypeSerial,
}

func (e MidiType) IsValid() bool {
	switch e {
	case MidiTypeUsb, MidiTypeSerial:
		return true
	}
	return false
}

func (e MidiType) String() string {
	return string(e)
}

func (e *MidiType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MidiType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MidiType", str)
	}
	return nil
}

func (e MidiType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkSpeed string

const (
	NetworkSpeedSuperspeed NetworkSpeed = "SUPERSPEED"
	NetworkSpeedGigabit    NetworkSpeed = "GIGABIT"
	NetworkSpeedTenGigabit NetworkSpeed = "TEN_GIGABIT"
)

var AllNetworkSpeed = []NetworkSpeed{
	NetworkSpeedSuperspeed,
	NetworkSpeedGigabit,
	NetworkSpeedTenGigabit,
}

func (e NetworkSpeed) IsValid() bool {
	switch e {
	case NetworkSpeedSuperspeed, NetworkSpeedGigabit, NetworkSpeedTenGigabit:
		return true
	}
	return false
}

func (e NetworkSpeed) String() string {
	return string(e)
}

func (e *NetworkSpeed) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkSpeed(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkSpeed", str)
	}
	return nil
}

func (e NetworkSpeed) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkType string

const (
	NetworkTypeSwitchManaged   NetworkType = "SWITCH_MANAGED"
	NetworkTypeSwitchUnmanaged NetworkType = "SWITCH_UNMANAGED"
	NetworkTypeRouter          NetworkType = "ROUTER"
	NetworkTypeAccessPoint     NetworkType = "ACCESS_POINT"
	NetworkTypeRouterSwAp      NetworkType = "ROUTER_SW_AP"
	NetworkTypeInjector        NetworkType = "INJECTOR"
	NetworkTypeModem           NetworkType = "MODEM"
	NetworkTypeNic             NetworkType = "NIC"
	NetworkTypeRepeater        NetworkType = "REPEATER"
	NetworkTypeNetworkBridge   NetworkType = "NETWORK_BRIDGE"
)

var AllNetworkType = []NetworkType{
	NetworkTypeSwitchManaged,
	NetworkTypeSwitchUnmanaged,
	NetworkTypeRouter,
	NetworkTypeAccessPoint,
	NetworkTypeRouterSwAp,
	NetworkTypeInjector,
	NetworkTypeModem,
	NetworkTypeNic,
	NetworkTypeRepeater,
	NetworkTypeNetworkBridge,
}

func (e NetworkType) IsValid() bool {
	switch e {
	case NetworkTypeSwitchManaged, NetworkTypeSwitchUnmanaged, NetworkTypeRouter, NetworkTypeAccessPoint, NetworkTypeRouterSwAp, NetworkTypeInjector, NetworkTypeModem, NetworkTypeNic, NetworkTypeRepeater, NetworkTypeNetworkBridge:
		return true
	}
	return false
}

func (e NetworkType) String() string {
	return string(e)
}

func (e *NetworkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkType", str)
	}
	return nil
}

func (e NetworkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PolarPattern string

const (
	PolarPatternSupercardioid PolarPattern = "SUPERCARDIOID"
	PolarPatternCardioid      PolarPattern = "CARDIOID"
	PolarPatternOmni          PolarPattern = "OMNI"
	PolarPatternHypercardioid PolarPattern = "HYPERCARDIOID"
	PolarPatternFigure8       PolarPattern = "FIGURE_8"
)

var AllPolarPattern = []PolarPattern{
	PolarPatternSupercardioid,
	PolarPatternCardioid,
	PolarPatternOmni,
	PolarPatternHypercardioid,
	PolarPatternFigure8,
}

func (e PolarPattern) IsValid() bool {
	switch e {
	case PolarPatternSupercardioid, PolarPatternCardioid, PolarPatternOmni, PolarPatternHypercardioid, PolarPatternFigure8:
		return true
	}
	return false
}

func (e PolarPattern) String() string {
	return string(e)
}

func (e *PolarPattern) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PolarPattern(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PolarPattern", str)
	}
	return nil
}

func (e PolarPattern) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PowerConnector string

const (
	PowerConnectorIec              PowerConnector = "IEC"
	PowerConnectorEdison           PowerConnector = "EDISON"
	PowerConnectorEdison20a        PowerConnector = "EDISON_20A"
	PowerConnectorPowercon20a      PowerConnector = "POWERCON_20A"
	PowerConnectorPowercon32a      PowerConnector = "POWERCON_32A"
	PowerConnectorPowerconTrue1    PowerConnector = "POWERCON_TRUE1"
	PowerConnectorPowerconTrue1Top PowerConnector = "POWERCON_TRUE1_TOP"
	PowerConnectorL6_20            PowerConnector = "L6_20"
	PowerConnectorL6_30            PowerConnector = "L6_30"
	PowerConnectorL6_50            PowerConnector = "L6_50"
	PowerConnectorL6_60            PowerConnector = "L6_60"
)

var AllPowerConnector = []PowerConnector{
	PowerConnectorIec,
	PowerConnectorEdison,
	PowerConnectorEdison20a,
	PowerConnectorPowercon20a,
	PowerConnectorPowercon32a,
	PowerConnectorPowerconTrue1,
	PowerConnectorPowerconTrue1Top,
	PowerConnectorL6_20,
	PowerConnectorL6_30,
	PowerConnectorL6_50,
	PowerConnectorL6_60,
}

func (e PowerConnector) IsValid() bool {
	switch e {
	case PowerConnectorIec, PowerConnectorEdison, PowerConnectorEdison20a, PowerConnectorPowercon20a, PowerConnectorPowercon32a, PowerConnectorPowerconTrue1, PowerConnectorPowerconTrue1Top, PowerConnectorL6_20, PowerConnectorL6_30, PowerConnectorL6_50, PowerConnectorL6_60:
		return true
	}
	return false
}

func (e PowerConnector) String() string {
	return string(e)
}

func (e *PowerConnector) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PowerConnector(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PowerConnector", str)
	}
	return nil
}

func (e PowerConnector) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Protocol string

const (
	ProtocolDante    Protocol = "DANTE"
	ProtocolAes67    Protocol = "AES_67"
	ProtocolAvb      Protocol = "AVB"
	ProtocolAvbMilan Protocol = "AVB_MILAN"
	ProtocolOptocore Protocol = "OPTOCORE"
	ProtocolUltranet Protocol = "ULTRANET"
	ProtocolANet     Protocol = "A_NET"
	ProtocolIP       Protocol = "IP"
)

var AllProtocol = []Protocol{
	ProtocolDante,
	ProtocolAes67,
	ProtocolAvb,
	ProtocolAvbMilan,
	ProtocolOptocore,
	ProtocolUltranet,
	ProtocolANet,
	ProtocolIP,
}

func (e Protocol) IsValid() bool {
	switch e {
	case ProtocolDante, ProtocolAes67, ProtocolAvb, ProtocolAvbMilan, ProtocolOptocore, ProtocolUltranet, ProtocolANet, ProtocolIP:
		return true
	}
	return false
}

func (e Protocol) String() string {
	return string(e)
}

func (e *Protocol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Protocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Protocol", str)
	}
	return nil
}

func (e Protocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SampleRate string

const (
	SampleRateSd  SampleRate = "SD"
	SampleRateHd  SampleRate = "HD"
	SampleRateUhd SampleRate = "UHD"
)

var AllSampleRate = []SampleRate{
	SampleRateSd,
	SampleRateHd,
	SampleRateUhd,
}

func (e SampleRate) IsValid() bool {
	switch e {
	case SampleRateSd, SampleRateHd, SampleRateUhd:
		return true
	}
	return false
}

func (e SampleRate) String() string {
	return string(e)
}

func (e *SampleRate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SampleRate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SampleRate", str)
	}
	return nil
}

func (e SampleRate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransmitterConnector string

const (
	TransmitterConnectorShureTa4 TransmitterConnector = "SHURE_TA4"
	TransmitterConnectorMicrodot TransmitterConnector = "MICRODOT"
	TransmitterConnectorTrrs     TransmitterConnector = "TRRS"
	TransmitterConnectorTriPin   TransmitterConnector = "TRI_PIN"
)

var AllTransmitterConnector = []TransmitterConnector{
	TransmitterConnectorShureTa4,
	TransmitterConnectorMicrodot,
	TransmitterConnectorTrrs,
	TransmitterConnectorTriPin,
}

func (e TransmitterConnector) IsValid() bool {
	switch e {
	case TransmitterConnectorShureTa4, TransmitterConnectorMicrodot, TransmitterConnectorTrrs, TransmitterConnectorTriPin:
		return true
	}
	return false
}

func (e TransmitterConnector) String() string {
	return string(e)
}

func (e *TransmitterConnector) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransmitterConnector(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransmitterConnector", str)
	}
	return nil
}

func (e TransmitterConnector) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
