// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type CategoryDetails interface {
	IsCategoryDetails()
}

type CategoryDetailsInput struct {
	ConsoleInput *ConsoleInput `json:"console_input,omitempty" bson:"console_input"`
}

type Console struct {
	TotalInputs        int        `json:"total_inputs" bson:"total_inputs"`
	TotalOutputs       int        `json:"total_outputs" bson:"total_outputs"`
	TotalBusses        int        `json:"total_busses" bson:"total_busses"`
	PhysicalInputs     int        `json:"physical_inputs" bson:"physical_inputs"`
	PhysicalOutputs    int        `json:"physical_outputs" bson:"physical_outputs"`
	AuxInputs          int        `json:"aux_inputs" bson:"aux_inputs"`
	PhysicalAuxInputs  int        `json:"physical_aux_inputs" bson:"physical_aux_inputs"`
	PhantomPowerInputs int        `json:"phantom_power_inputs" bson:"phantom_power_inputs"`
	Faders             int        `json:"faders" bson:"faders"`
	Motorized          bool       `json:"motorized" bson:"motorized"`
	Midi               MidiType   `json:"midi" bson:"midi"`
	ProtocolInputs     int        `json:"protocol_inputs" bson:"protocol_inputs"`
	SignalProtocol     Protocol   `json:"signal_protocol" bson:"signal_protocol"`
	CanExpand          bool       `json:"can_expand" bson:"can_expand"`
	MaxSampleRate      SampleRate `json:"max_sample_rate" bson:"max_sample_rate"`
	Power              *Power     `json:"power" bson:"power"`
}

func (Console) IsCategoryDetails() {}

type ConsoleInput struct {
	TotalInputs        int         `json:"total_inputs" bson:"total_inputs"`
	TotalOutputs       int         `json:"total_outputs" bson:"total_outputs"`
	TotalBusses        int         `json:"total_busses" bson:"total_busses"`
	PhysicalInputs     int         `json:"physical_inputs" bson:"physical_inputs"`
	PhysicalOutputs    int         `json:"physical_outputs" bson:"physical_outputs"`
	AuxInputs          int         `json:"aux_inputs" bson:"aux_inputs"`
	PhysicalAuxInputs  int         `json:"physical_aux_inputs" bson:"physical_aux_inputs"`
	PhantomPowerInputs int         `json:"phantom_power_inputs" bson:"phantom_power_inputs"`
	Faders             int         `json:"faders" bson:"faders"`
	Motorized          bool        `json:"motorized" bson:"motorized"`
	Midi               MidiType    `json:"midi" bson:"midi"`
	ProtocolInputs     int         `json:"protocol_inputs" bson:"protocol_inputs"`
	SignalProtocol     Protocol    `json:"signal_protocol" bson:"signal_protocol"`
	CanExpand          bool        `json:"can_expand" bson:"can_expand"`
	MaxSampleRate      SampleRate  `json:"max_sample_rate" bson:"max_sample_rate"`
	Power              *PowerInput `json:"power,omitempty" bson:"power"`
}

type Dimension struct {
	Length float64 `json:"length" bson:"length"`
	Width  float64 `json:"width" bson:"width"`
	Height float64 `json:"height" bson:"height"`
}

type DimensionInput struct {
	Length float64 `json:"length" bson:"length"`
	Width  float64 `json:"width" bson:"width"`
	Height float64 `json:"height" bson:"height"`
}

type Error struct {
	Field   string `json:"field" bson:"field"`
	Message string `json:"message" bson:"message"`
}

type Item struct {
	ID           primitive.ObjectID `json:"id" bson:"_id"`
	CreatedAt    string             `json:"created_at" bson:"created_at"`
	UpdatedAt    string             `json:"updated_at" bson:"updated_at"`
	Cost         float64            `json:"cost" bson:"cost"`
	Model        string             `json:"model" bson:"model"`
	Weight       float64            `json:"weight" bson:"weight"`
	Manufacturer string             `json:"manufacturer" bson:"manufacturer"`
	Category     Category           `json:"category" bson:"category"`
	Details      CategoryDetails    `json:"details,omitempty" bson:"details"`
	Notes        *string            `json:"notes,omitempty" bson:"notes"`
	Dimensions   *Dimension         `json:"dimensions,omitempty" bson:"dimensions"`
	PDFBlob      *string            `json:"pdf_blob,omitempty" bson:"pdf_blob"`
}

type ItemInput struct {
	CreatedAt    string          `json:"created_at" bson:"created_at"`
	UpdatedAt    string          `json:"updated_at" bson:"updated_at"`
	Cost         float64         `json:"cost" bson:"cost"`
	Model        string          `json:"model" bson:"model"`
	Weight       float64         `json:"weight" bson:"weight"`
	Manufacturer string          `json:"manufacturer" bson:"manufacturer"`
	Category     Category        `json:"category" bson:"category"`
	Notes        *string         `json:"notes,omitempty" bson:"notes"`
	Dimensions   *DimensionInput `json:"dimensions,omitempty" bson:"dimensions"`
	PDFBlob      *string         `json:"pdf_blob,omitempty" bson:"pdf_blob"`
}

type Power struct {
	LowerVoltage    *float64        `json:"lower_voltage,omitempty" bson:"lower_voltage"`
	UpperVoltage    *float64        `json:"upper_voltage,omitempty" bson:"upper_voltage"`
	Wattage         float64         `json:"wattage" bson:"wattage"`
	MaxWattage      float64         `json:"max_wattage" bson:"max_wattage"`
	Redundant       *bool           `json:"redundant,omitempty" bson:"redundant"`
	InputConnector  PowerConnector  `json:"input_connector" bson:"input_connector"`
	OutputConnector *PowerConnector `json:"output_connector,omitempty" bson:"output_connector"`
}

type PowerInput struct {
	LowerVoltage    *float64        `json:"lower_voltage,omitempty" bson:"lower_voltage"`
	UpperVoltage    *float64        `json:"upper_voltage,omitempty" bson:"upper_voltage"`
	Wattage         float64         `json:"wattage" bson:"wattage"`
	MaxWattage      float64         `json:"max_wattage" bson:"max_wattage"`
	Redundant       *bool           `json:"redundant,omitempty" bson:"redundant"`
	InputConnector  PowerConnector  `json:"input_connector" bson:"input_connector"`
	OutputConnector *PowerConnector `json:"output_connector,omitempty" bson:"output_connector"`
}

type User struct {
	ID    string `json:"id" bson:"_id"`
	Name  string `json:"name" bson:"name"`
	Email string `json:"email" bson:"email"`
}

type UserInput struct {
	Name  string `json:"name" bson:"name"`
	Email string `json:"email" bson:"email"`
}

type Analog string

const (
	AnalogXlrAnalog  Analog = "XLR_ANALOG"
	AnalogXlrDigital Analog = "XLR_DIGITAL"
	AnalogTs         Analog = "TS"
	AnalogTrs        Analog = "TRS"
	AnalogTrrs       Analog = "TRRS"
)

var AllAnalog = []Analog{
	AnalogXlrAnalog,
	AnalogXlrDigital,
	AnalogTs,
	AnalogTrs,
	AnalogTrrs,
}

func (e Analog) IsValid() bool {
	switch e {
	case AnalogXlrAnalog, AnalogXlrDigital, AnalogTs, AnalogTrs, AnalogTrrs:
		return true
	}
	return false
}

func (e Analog) String() string {
	return string(e)
}

func (e *Analog) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Analog(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Analog", str)
	}
	return nil
}

func (e Analog) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Categories string

const (
	CategoriesConsole     Categories = "CONSOLE"
	CategoriesProcessor   Categories = "PROCESSOR"
	CategoriesMonitoring  Categories = "MONITORING"
	CategoriesSpeaker     Categories = "SPEAKER"
	CategoriesAmplifier   Categories = "AMPLIFIER"
	CategoriesComputer    Categories = "COMPUTER"
	CategoriesNetwork     Categories = "NETWORK"
	CategoriesRadio       Categories = "RADIO"
	CategoriesMicrophones Categories = "MICROPHONES"
	CategoriesSpkHardware Categories = "SPK_HARDWARE"
	CategoriesGeneric     Categories = "GENERIC"
)

var AllCategories = []Categories{
	CategoriesConsole,
	CategoriesProcessor,
	CategoriesMonitoring,
	CategoriesSpeaker,
	CategoriesAmplifier,
	CategoriesComputer,
	CategoriesNetwork,
	CategoriesRadio,
	CategoriesMicrophones,
	CategoriesSpkHardware,
	CategoriesGeneric,
}

func (e Categories) IsValid() bool {
	switch e {
	case CategoriesConsole, CategoriesProcessor, CategoriesMonitoring, CategoriesSpeaker, CategoriesAmplifier, CategoriesComputer, CategoriesNetwork, CategoriesRadio, CategoriesMicrophones, CategoriesSpkHardware, CategoriesGeneric:
		return true
	}
	return false
}

func (e Categories) String() string {
	return string(e)
}

func (e *Categories) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Categories(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Categories", str)
	}
	return nil
}

func (e Categories) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Category string

const (
	CategoryConsole     Category = "CONSOLE"
	CategoryProcessor   Category = "PROCESSOR"
	CategoryMonitoring  Category = "MONITORING"
	CategorySpeaker     Category = "SPEAKER"
	CategoryAmplifier   Category = "AMPLIFIER"
	CategoryComputer    Category = "COMPUTER"
	CategoryNetwork     Category = "NETWORK"
	CategoryRadio       Category = "RADIO"
	CategoryMicrophones Category = "MICROPHONES"
	CategorySpkHardware Category = "SPK_HARDWARE"
	CategoryGeneric     Category = "GENERIC"
)

var AllCategory = []Category{
	CategoryConsole,
	CategoryProcessor,
	CategoryMonitoring,
	CategorySpeaker,
	CategoryAmplifier,
	CategoryComputer,
	CategoryNetwork,
	CategoryRadio,
	CategoryMicrophones,
	CategorySpkHardware,
	CategoryGeneric,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryConsole, CategoryProcessor, CategoryMonitoring, CategorySpeaker, CategoryAmplifier, CategoryComputer, CategoryNetwork, CategoryRadio, CategoryMicrophones, CategorySpkHardware, CategoryGeneric:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MidiType string

const (
	MidiTypeUsb    MidiType = "USB"
	MidiTypeSerial MidiType = "SERIAL"
)

var AllMidiType = []MidiType{
	MidiTypeUsb,
	MidiTypeSerial,
}

func (e MidiType) IsValid() bool {
	switch e {
	case MidiTypeUsb, MidiTypeSerial:
		return true
	}
	return false
}

func (e MidiType) String() string {
	return string(e)
}

func (e *MidiType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MidiType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MidiType", str)
	}
	return nil
}

func (e MidiType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PowerConnector string

const (
	PowerConnectorIec              PowerConnector = "IEC"
	PowerConnectorEdison           PowerConnector = "EDISON"
	PowerConnectorEdison20a        PowerConnector = "EDISON_20A"
	PowerConnectorPowercon20a      PowerConnector = "POWERCON_20A"
	PowerConnectorPowercon32a      PowerConnector = "POWERCON_32A"
	PowerConnectorPowerconTrue1    PowerConnector = "POWERCON_TRUE1"
	PowerConnectorPowerconTrue1Top PowerConnector = "POWERCON_TRUE1_TOP"
	PowerConnectorL6_20            PowerConnector = "L6_20"
	PowerConnectorL6_30            PowerConnector = "L6_30"
	PowerConnectorL6_50            PowerConnector = "L6_50"
	PowerConnectorL6_60            PowerConnector = "L6_60"
)

var AllPowerConnector = []PowerConnector{
	PowerConnectorIec,
	PowerConnectorEdison,
	PowerConnectorEdison20a,
	PowerConnectorPowercon20a,
	PowerConnectorPowercon32a,
	PowerConnectorPowerconTrue1,
	PowerConnectorPowerconTrue1Top,
	PowerConnectorL6_20,
	PowerConnectorL6_30,
	PowerConnectorL6_50,
	PowerConnectorL6_60,
}

func (e PowerConnector) IsValid() bool {
	switch e {
	case PowerConnectorIec, PowerConnectorEdison, PowerConnectorEdison20a, PowerConnectorPowercon20a, PowerConnectorPowercon32a, PowerConnectorPowerconTrue1, PowerConnectorPowerconTrue1Top, PowerConnectorL6_20, PowerConnectorL6_30, PowerConnectorL6_50, PowerConnectorL6_60:
		return true
	}
	return false
}

func (e PowerConnector) String() string {
	return string(e)
}

func (e *PowerConnector) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PowerConnector(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PowerConnector", str)
	}
	return nil
}

func (e PowerConnector) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Protocol string

const (
	ProtocolDante    Protocol = "DANTE"
	ProtocolAes67    Protocol = "AES_67"
	ProtocolAvb      Protocol = "AVB"
	ProtocolAvbMilan Protocol = "AVB_MILAN"
	ProtocolOptocore Protocol = "OPTOCORE"
	ProtocolUltranet Protocol = "ULTRANET"
	ProtocolIP       Protocol = "IP"
)

var AllProtocol = []Protocol{
	ProtocolDante,
	ProtocolAes67,
	ProtocolAvb,
	ProtocolAvbMilan,
	ProtocolOptocore,
	ProtocolUltranet,
	ProtocolIP,
}

func (e Protocol) IsValid() bool {
	switch e {
	case ProtocolDante, ProtocolAes67, ProtocolAvb, ProtocolAvbMilan, ProtocolOptocore, ProtocolUltranet, ProtocolIP:
		return true
	}
	return false
}

func (e Protocol) String() string {
	return string(e)
}

func (e *Protocol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Protocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Protocol", str)
	}
	return nil
}

func (e Protocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SampleRate string

const (
	SampleRateSd  SampleRate = "SD"
	SampleRateHd  SampleRate = "HD"
	SampleRateUhd SampleRate = "UHD"
)

var AllSampleRate = []SampleRate{
	SampleRateSd,
	SampleRateHd,
	SampleRateUhd,
}

func (e SampleRate) IsValid() bool {
	switch e {
	case SampleRateSd, SampleRateHd, SampleRateUhd:
		return true
	}
	return false
}

func (e SampleRate) String() string {
	return string(e)
}

func (e *SampleRate) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SampleRate(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SampleRate", str)
	}
	return nil
}

func (e SampleRate) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
